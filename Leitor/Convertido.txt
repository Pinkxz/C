# Validando se a memória foi preenchida corretamente
# 0;i;ld r0, 96
0 - 2:  1001 1000 0000 0000 1001 0110
        9    8    0    0    9    6

# 3;i;ld r1, 98
3 - 5:  1001 1010 0000 0000 1001 1000
        9    A    0    0    9    8

# 6;i;sub r0, r1
6 - 7:  0001 1000 1000 0000
        1    8    8    0

# 8;i;ld r1, 94
8 - A:  1001 1010 0000 0000 1001 0100
        9    A    0    0    9    4

# b;i;div r1, r0
B - C:  0010 1010 0000 0000 0000 0000
        2   A    0    0    0    0

# d;i;ld r2, 92
D - F:  1001 1100 0000 0000 1001 0010
        9    C    0    0    9    2

# 10;i;mul r2, r1
0010 0100 1000 0000 0000 0000
2    4    8    0    0    0

# 12;i;ld r1, 90
1001 1010 0000 0000 1001 0000
9    A    0    0    9    0

# 15;i;add r1, r2
0001 0010 1000 0000 0000 0000
1    4    8    0    0    0

# 17;i;st r1, 8e
1010 0010 0000 0000 1000 1110
A    4    0    0    8    E

# 1a;i;hlt
0000 0000 0000 0000 0000 0000
0    0    0    0    0    0

# 90;d;20
Posição [145] = 0x20

# 92;d;3
Posição [149] = 0x3

# 94;d;4
Posição [149] = 0x4.

# 96;d;5
Posição [151] = 0x5

# 98;d;3
Posição [153] = 0x3

int zeraByte2(char entrada, char *memoria, short int posicao){ //Esqueci isso, a se corrigir
    int opcode = getOpcode(entrada);
    int memTemporaria = 0x00000000;
    if(opcode == SUB){
        memTemporaria = memoria[posicao] << 9;
        memoria[posicao] = memoria[posicao] << 9; // Esqueci o que ia fazer, a corrigir
        memoria[posicao] = 0b0000000;
        memoria[posicao] = memTemporaria >> 9;

        return memoria;
    }
}

int main(){
    unsigned char memoriateste[11];
    int i = 6;

    memoriateste[0] = 0x98;
    memoriateste[1] = 0x96;
    memoriateste[2] = 0x00;
    memoriateste[3] = 0x99;
    memoriateste[4] = 0x98;
    memoriateste[5] = 0x00;
    memoriateste[6] = 0x18;
    memoriateste[7] = 0x20;
    memoriateste[8] = 0x99;
    memoriateste[9] = 0x94;
    memoriateste[10] = 0x00;

    memoriateste[i] = arrasta1bit(memoriateste, i);

    printf("%02x\n", memoriateste[0]);
    printf("%02x\n", memoriateste[1]);
    printf("%02x\n", memoriateste[2]);
    printf("%02x\n", memoriateste[3]);
    printf("%02x\n", memoriateste[4]);
    printf("%02x\n", memoriateste[5]);
    printf("%02x\n", memoriateste[6]);
    printf("%02x\n", memoriateste[7]);
    printf("%02x\n", memoriateste[8]);
    printf("%02x\n", memoriateste[9]);
    printf("%02x\n", memoriateste[10]);

    return 0;

}